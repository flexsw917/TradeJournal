import React, { useState, useEffect } from 'react';
import { Calendar, TrendingUp, TrendingDown, BarChart3, DollarSign, Target, Activity, PieChart } from 'lucide-react';

const TastyTradeJournal = () => {
  const [trades, setTrades] = useState([]);
  const [currentView, setCurrentView] = useState('dollars');
  const [selectedPeriod, setSelectedPeriod] = useState('all');
  const [newTrade, setNewTrade] = useState({
    symbol: '',
    type: 'long',
    entry: '',
    exit: '',
    quantity: '',
    date: new Date().toISOString().split('T')[0],
    stopLoss: '',
    profitTarget: '',
    notes: ''
  });

  // Sample initial data to demonstrate the interface
  useEffect(() => {
    const sampleTrades = [
      {
        id: 1,
        symbol: 'AAPL',
        type: 'long',
        entry: 175.50,
        exit: 182.30,
        quantity: 100,
        date: '2024-07-15',
        pnl: 680,
        commission: 2.00,
        netPnl: 678,
        holdTime: '2d 4h',
        tags: ['momentum', 'earnings'],
        status: 'closed'
      },
      {
        id: 2,
        symbol: 'TSLA',
        type: 'short',
        entry: 245.80,
        exit: 239.20,
        quantity: 50,
        date: '2024-07-18',
        pnl: 330,
        commission: 1.50,
        netPnl: 328.50,
        holdTime: '1d 6h',
        tags: ['reversal'],
        status: 'closed'
      },
      {
        id: 3,
        symbol: 'SPY',
        type: 'long',
        entry: 445.20,
        exit: 441.90,
        quantity: 200,
        date: '2024-07-20',
        pnl: -660,
        commission: 3.00,
        netPnl: -663,
        holdTime: '4h 30m',
        tags: ['index', 'scalp'],
        status: 'closed'
      }
    ];
    setTrades(sampleTrades);
  }, []);

  const calculateStats = () => {
    if (trades.length === 0) return {};
    
    const closedTrades = trades.filter(t => t.status === 'closed');
    const winningTrades = closedTrades.filter(t => t.netPnl > 0);
    const losingTrades = closedTrades.filter(t => t.netPnl < 0);
    const breakEvenTrades = closedTrades.filter(t => t.netPnl === 0);
    
    const totalPnl = closedTrades.reduce((sum, trade) => sum + trade.netPnl, 0);
    const totalCommissions = closedTrades.reduce((sum, trade) => sum + trade.commission, 0);
    
    const avgWin = winningTrades.length > 0 ? 
      winningTrades.reduce((sum, trade) => sum + trade.netPnl, 0) / winningTrades.length : 0;
    
    const avgLoss = losingTrades.length > 0 ? 
      Math.abs(losingTrades.reduce((sum, trade) => sum + trade.netPnl, 0) / losingTrades.length) : 0;
    
    const winRate = closedTrades.length > 0 ? (winningTrades.length / closedTrades.length) * 100 : 0;
    
    const profitFactor = losingTrades.length > 0 ? 
      Math.abs(winningTrades.reduce((sum, trade) => sum + trade.netPnl, 0) / 
      losingTrades.reduce((sum, trade) => sum + trade.netPnl, 0)) : 0;
    
    const expectancy = closedTrades.length > 0 ? totalPnl / closedTrades.length : 0;
    
    return {
      totalPnl,
      totalCommissions,
      totalTrades: closedTrades.length,
      winningTrades: winningTrades.length,
      losingTrades: losingTrades.length,
      breakEvenTrades: breakEvenTrades.length,
      winRate,
      avgWin,
      avgLoss,
      profitFactor,
      expectancy,
      largestWin: winningTrades.length > 0 ? Math.max(...winningTrades.map(t => t.netPnl)) : 0,
      largestLoss: losingTrades.length > 0 ? Math.min(...losingTrades.map(t => t.netPnl)) : 0
    };
  };

  const stats = calculateStats();

  const formatCurrency = (amount) => {
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: 'USD',
      minimumFractionDigits: 2
    }).format(amount);
  };

  const formatPercentage = (value) => {
    return `${value.toFixed(2)}%`;
  };

  const addTrade = () => {
    if (!newTrade.symbol || !newTrade.entry || !newTrade.quantity) return;
    
    const trade = {
      id: Date.now(),
      ...newTrade,
      entry: parseFloat(newTrade.entry),
      exit: newTrade.exit ? parseFloat(newTrade.exit) : null,
      quantity: parseInt(newTrade.quantity),
      stopLoss: newTrade.stopLoss ? parseFloat(newTrade.stopLoss) : null,
      profitTarget: newTrade.profitTarget ? parseFloat(newTrade.profitTarget) : null,
      status: newTrade.exit ? 'closed' : 'open',
      commission: 1.50, // Default commission
      pnl: newTrade.exit ? 
        (parseFloat(newTrade.exit) - parseFloat(newTrade.entry)) * parseInt(newTrade.quantity) * (newTrade.type === 'short' ? -1 : 1) : 0,
      netPnl: newTrade.exit ? 
        ((parseFloat(newTrade.exit) - parseFloat(newTrade.entry)) * parseInt(newTrade.quantity) * (newTrade.type === 'short' ? -1 : 1)) - 1.50 : 0,
      tags: [],
      holdTime: newTrade.exit ? '1d 2h' : 'Open' // Simplified for demo
    };
    
    setTrades([...trades, trade]);
    setNewTrade({
      symbol: '',
      type: 'long',
      entry: '',
      exit: '',
      quantity: '',
      date: new Date().toISOString().split('T')[0],
      stopLoss: '',
      profitTarget: '',
      notes: ''
    });
  };

  const StatCard = ({ title, value, icon: Icon, color = 'blue', subtitle }) => (
    <div className="bg-white rounded-lg shadow-lg p-6 border-l-4" style={{ borderLeftColor: color }}>
      <div className="flex items-center justify-between">
        <div>
          <p className="text-sm font-medium text-gray-600">{title}</p>
          <p className="text-2xl font-bold text-gray-900">{value}</p>
          {subtitle && <p className="text-xs text-gray-500 mt-1">{subtitle}</p>}
        </div>
        <Icon className="h-8 w-8" style={{ color }} />
      </div>
    </div>
  );

  const CircularProgress = ({ percentage, color = '#10B981' }) => {
    const radius = 45;
    const strokeWidth = 8;
    const normalizedRadius = radius - strokeWidth * 2;
    const circumference = normalizedRadius * 2 * Math.PI;
    const strokeDasharray = `${(percentage / 100) * circumference} ${circumference}`;
    
    return (
      <div className="relative w-32 h-32">
        <svg
          height={radius * 2}
          width={radius * 2}
          className="transform -rotate-90"
        >
          <circle
            stroke="#E5E7EB"
            fill="transparent"
            strokeWidth={strokeWidth}
            r={normalizedRadius}
            cx={radius}
            cy={radius}
          />
          <circle
            stroke={color}
            fill="transparent"
            strokeWidth={strokeWidth}
            strokeDasharray={strokeDasharray}
            strokeLinecap="round"
            r={normalizedRadius}
            cx={radius}
            cy={radius}
          />
        </svg>
        <div className="absolute inset-0 flex items-center justify-center">
          <span className="text-xl font-bold">{percentage.toFixed(1)}%</span>
        </div>
      </div>
    );
  };

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <div className="bg-white shadow-sm border-b">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center py-4">
            <div className="flex items-center space-x-4">
              <h1 className="text-2xl font-bold text-gray-900">TastyTrade Journal</h1>
              <div className="flex space-x-2">
                <button
                  onClick={() => setCurrentView('dollars')}
                  className={`px-3 py-1 rounded text-sm ${currentView === 'dollars' ? 'bg-blue-500 text-white' : 'bg-gray-200'}`}
                >
                  Dollars
                </button>
                <button
                  onClick={() => setCurrentView('percentage')}
                  className={`px-3 py-1 rounded text-sm ${currentView === 'percentage' ? 'bg-blue-500 text-white' : 'bg-gray-200'}`}
                >
                  Percentage
                </button>
              </div>
            </div>
            <div className="text-sm text-gray-600">
              Good afternoon! Last import: Today at 10:42 PM
            </div>
          </div>
        </div>
      </div>

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Upper Section - Key Metrics */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
          <StatCard
            title="Net P&L"
            value={formatCurrency(stats.totalPnl || 0)}
            icon={DollarSign}
            color="#10B981"
            subtitle={`${stats.totalTrades || 0} trades`}
          />
          <StatCard
            title="Trade Win %"
            value={formatPercentage(stats.winRate || 0)}
            icon={TrendingUp}
            color="#3B82F6"
            subtitle={`${stats.winningTrades || 0} winning trades`}
          />
          <StatCard
            title="Avg Win/Loss"
            value={`${formatCurrency(stats.avgWin || 0)} / ${formatCurrency(stats.avgLoss || 0)}`}
            icon={BarChart3}
            color="#8B5CF6"
            subtitle="Average trade outcome"
          />
          <StatCard
            title="Profit Factor"
            value={(stats.profitFactor || 0).toFixed(2)}
            icon={Target}
            color="#F59E0B"
            subtitle="Total wins / Total losses"
          />
        </div>

        {/* Win Rate Visual */}
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6 mb-8">
          <div className="bg-white rounded-lg shadow-lg p-6">
            <h3 className="text-lg font-semibold mb-4">Trade Win Rate</h3>
            <div className="flex justify-center">
              <CircularProgress percentage={stats.winRate || 0} color="#10B981" />
            </div>
          </div>
          
          <div className="bg-white rounded-lg shadow-lg p-6">
            <h3 className="text-lg font-semibold mb-4">Trade Expectancy</h3>
            <div className="text-center">
              <div className="text-3xl font-bold text-gray-900 mb-2">
                {formatCurrency(stats.expectancy || 0)}
              </div>
              <p className="text-sm text-gray-600">Expected per trade</p>
            </div>
          </div>

          <div className="bg-white rounded-lg shadow-lg p-6">
            <h3 className="text-lg font-semibold mb-4">Trade Breakdown</h3>
            <div className="space-y-2">
              <div className="flex justify-between">
                <span className="text-green-600">Wins:</span>
                <span className="font-semibold">{stats.winningTrades || 0}</span>
              </div>
              <div className="flex justify-between">
                <span className="text-red-600">Losses:</span>
                <span className="font-semibold">{stats.losingTrades || 0}</span>
              </div>
              <div className="flex justify-between">
                <span className="text-gray-600">Break Even:</span>
                <span className="font-semibold">{stats.breakEvenTrades || 0}</span>
              </div>
            </div>
          </div>
        </div>

        {/* Add New Trade Form */}
        <div className="bg-white rounded-lg shadow-lg p-6 mb-8">
          <h3 className="text-lg font-semibold mb-4">Add New Trade</h3>
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
            <input
              type="text"
              placeholder="Symbol (e.g., AAPL)"
              value={newTrade.symbol}
              onChange={(e) => setNewTrade({...newTrade, symbol: e.target.value.toUpperCase()})}
              className="border rounded px-3 py-2"
            />
            <select
              value={newTrade.type}
              onChange={(e) => setNewTrade({...newTrade, type: e.target.value})}
              className="border rounded px-3 py-2"
            >
              <option value="long">Long</option>
              <option value="short">Short</option>
            </select>
            <input
              type="number"
              step="0.01"
              placeholder="Entry Price"
              value={newTrade.entry}
              onChange={(e) => setNewTrade({...newTrade, entry: e.target.value})}
              className="border rounded px-3 py-2"
            />
            <input
              type="number"
              step="0.01"
              placeholder="Exit Price (optional)"
              value={newTrade.exit}
              onChange={(e) => setNewTrade({...newTrade, exit: e.target.value})}
              className="border rounded px-3 py-2"
            />
          </div>
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mt-4">
            <input
              type="number"
              placeholder="Quantity"
              value={newTrade.quantity}
              onChange={(e) => setNewTrade({...newTrade, quantity: e.target.value})}
              className="border rounded px-3 py-2"
            />
            <input
              type="date"
              value={newTrade.date}
              onChange={(e) => setNewTrade({...newTrade, date: e.target.value})}
              className="border rounded px-3 py-2"
            />
            <input
              type="number"
              step="0.01"
              placeholder="Stop Loss (optional)"
              value={newTrade.stopLoss}
              onChange={(e) => setNewTrade({...newTrade, stopLoss: e.target.value})}
              className="border rounded px-3 py-2"
            />
            <button
              onClick={addTrade}
              className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600"
            >
              Add Trade
            </button>
          </div>
        </div>

        {/* Recent Trades Table */}
        <div className="bg-white rounded-lg shadow-lg p-6">
          <h3 className="text-lg font-semibold mb-4">Recent Trades</h3>
          <div className="overflow-x-auto">
            <table className="min-w-full table-auto">
              <thead>
                <tr className="bg-gray-50">
                  <th className="px-4 py-2 text-left">Date</th>
                  <th className="px-4 py-2 text-left">Symbol</th>
                  <th className="px-4 py-2 text-left">Type</th>
                  <th className="px-4 py-2 text-left">Entry</th>
                  <th className="px-4 py-2 text-left">Exit</th>
                  <th className="px-4 py-2 text-left">Qty</th>
                  <th className="px-4 py-2 text-left">Net P&L</th>
                  <th className="px-4 py-2 text-left">Hold Time</th>
                  <th className="px-4 py-2 text-left">Status</th>
                </tr>
              </thead>
              <tbody>
                {trades.slice().reverse().map((trade) => (
                  <tr key={trade.id} className="border-t">
                    <td className="px-4 py-2">{trade.date}</td>
                    <td className="px-4 py-2 font-semibold">{trade.symbol}</td>
                    <td className="px-4 py-2">
                      <span className={`px-2 py-1 rounded text-xs ${
                        trade.type === 'long' ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'
                      }`}>
                        {trade.type.toUpperCase()}
                      </span>
                    </td>
                    <td className="px-4 py-2">${trade.entry.toFixed(2)}</td>
                    <td className="px-4 py-2">{trade.exit ? `$${trade.exit.toFixed(2)}` : '-'}</td>
                    <td className="px-4 py-2">{trade.quantity}</td>
                    <td className={`px-4 py-2 font-semibold ${
                      trade.netPnl > 0 ? 'text-green-600' : trade.netPnl < 0 ? 'text-red-600' : 'text-gray-600'
                    }`}>
                      {formatCurrency(trade.netPnl)}
                    </td>
                    <td className="px-4 py-2">{trade.holdTime}</td>
                    <td className="px-4 py-2">
                      <span className={`px-2 py-1 rounded text-xs ${
                        trade.status === 'closed' ? 'bg-gray-100 text-gray-800' : 'bg-blue-100 text-blue-800'
                      }`}>
                        {trade.status.toUpperCase()}
                      </span>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>

        {/* Additional Stats */}
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mt-8">
          <div className="bg-white rounded-lg shadow-lg p-6">
            <h3 className="text-lg font-semibold mb-4">Performance Summary</h3>
            <div className="space-y-3">
              <div className="flex justify-between">
                <span>Largest Win:</span>
                <span className="font-semibold text-green-600">{formatCurrency(stats.largestWin || 0)}</span>
              </div>
              <div className="flex justify-between">
                <span>Largest Loss:</span>
                <span className="font-semibold text-red-600">{formatCurrency(stats.largestLoss || 0)}</span>
              </div>
              <div className="flex justify-between">
                <span>Total Commissions:</span>
                <span className="font-semibold">{formatCurrency(stats.totalCommissions || 0)}</span>
              </div>
            </div>
          </div>
          
          <div className="bg-white rounded-lg shadow-lg p-6">
            <h3 className="text-lg font-semibold mb-4">Trading Activity</h3>
            <div className="space-y-3">
              <div className="flex justify-between">
                <span>Total Trades:</span>
                <span className="font-semibold">{stats.totalTrades || 0}</span>
              </div>
              <div className="flex justify-between">
                <span>Open Positions:</span>
                <span className="font-semibold">{trades.filter(t => t.status === 'open').length}</span>
              </div>
              <div className="flex justify-between">
                <span>Average Trade:</span>
                <span className="font-semibold">{formatCurrency(stats.expectancy || 0)}</span>
              </div>
            </div>
          </div>

          <div className="bg-white rounded-lg shadow-lg p-6">
            <h3 className="text-lg font-semibold mb-4">Risk Metrics</h3>
            <div className="space-y-3">
              <div className="flex justify-between">
                <span>Profit Factor:</span>
                <span className="font-semibold">{(stats.profitFactor || 0).toFixed(2)}</span>
              </div>
              <div className="flex justify-between">
                <span>Win Rate:</span>
                <span className="font-semibold">{formatPercentage(stats.winRate || 0)}</span>
              </div>
              <div className="flex justify-between">
                <span>Risk/Reward:</span>
                <span className="font-semibold">{stats.avgLoss > 0 ? (stats.avgWin / stats.avgLoss).toFixed(2) : 'N/A'}</span>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default TastyTradeJournal;
