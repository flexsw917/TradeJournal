import React, { useState, useEffect } from 'react';
import { Calendar, TrendingUp, TrendingDown, DollarSign, BarChart3, Activity, Target, Award, AlertCircle, ChevronDown, Plus, Settings, Eye, EyeOff } from 'lucide-react';

const TradingJournal = () => {
  const [trades, setTrades] = useState([]);
  const [viewMode, setViewMode] = useState('dollars');
  const [showPrivacy, setShowPrivacy] = useState(false);
  const [dateFilter, setDateFilter] = useState({ start: null, end: null });
  const [activeTab, setActiveTab] = useState('dashboard');
  
  // Sample data - in real app, this would come from tastytrade API
  const sampleTrades = [
    { id: 1, date: '2025-01-15', symbol: 'AAPL', quantity: 100, entryPrice: 150, exitPrice: 155, pnl: 500, type: 'LONG', holdTime: '2h 30m', commission: 2.50 },
    { id: 2, date: '2025-01-15', symbol: 'TSLA', quantity: 50, entryPrice: 200, exitPrice: 195, pnl: -250, type: 'SHORT', holdTime: '1h 45m', commission: 2.50 },
    { id: 3, date: '2025-01-16', symbol: 'SPY', quantity: 200, entryPrice: 400, exitPrice: 402, pnl: 400, type: 'LONG', holdTime: '3h 15m', commission: 2.50 },
    { id: 4, date: '2025-01-17', symbol: 'NVDA', quantity: 75, entryPrice: 300, exitPrice: 305, pnl: 375, type: 'LONG', holdTime: '4h 00m', commission: 2.50 },
    { id: 5, date: '2025-01-17', symbol: 'META', quantity: 100, entryPrice: 250, exitPrice: 248, pnl: -200, type: 'SHORT', holdTime: '1h 30m', commission: 2.50 },
  ];

  useEffect(() => {
    setTrades(sampleTrades);
  }, []);

  // Calculate statistics
  const calculateStats = () => {
    const netPnL = trades.reduce((sum, trade) => sum + trade.pnl - trade.commission, 0);
    const winningTrades = trades.filter(trade => trade.pnl > 0);
    const losingTrades = trades.filter(trade => trade.pnl < 0);
    const winRate = trades.length > 0 ? (winningTrades.length / trades.length * 100) : 0;
    const avgWin = winningTrades.length > 0 ? winningTrades.reduce((sum, trade) => sum + trade.pnl, 0) / winningTrades.length : 0;
    const avgLoss = losingTrades.length > 0 ? losingTrades.reduce((sum, trade) => sum + trade.pnl, 0) / losingTrades.length : 0;
    const expectancy = trades.length > 0 ? netPnL / trades.length : 0;
    
    // Calculate daily stats
    const dailyPnL = {};
    trades.forEach(trade => {
      if (!dailyPnL[trade.date]) dailyPnL[trade.date] = 0;
      dailyPnL[trade.date] += trade.pnl - trade.commission;
    });
    
    const winningDays = Object.values(dailyPnL).filter(pnl => pnl > 0).length;
    const totalDays = Object.keys(dailyPnL).length;
    const dayWinRate = totalDays > 0 ? (winningDays / totalDays * 100) : 0;
    
    return {
      netPnL,
      winRate,
      dayWinRate,
      avgWin,
      avgLoss,
      expectancy,
      totalTrades: trades.length,
      winningTrades: winningTrades.length,
      losingTrades: losingTrades.length,
      profitFactor: Math.abs(avgWin * winningTrades.length) / Math.abs(avgLoss * losingTrades.length) || 0,
      maxDrawdown: calculateMaxDrawdown(),
      currentStreak: calculateCurrentStreak(),
      accountBalance: 10000 + netPnL
    };
  };

  const calculateMaxDrawdown = () => {
    let peak = 0;
    let maxDrawdown = 0;
    let runningPnL = 0;
    
    trades.forEach(trade => {
      runningPnL += trade.pnl - trade.commission;
      if (runningPnL > peak) peak = runningPnL;
      const drawdown = peak - runningPnL;
      if (drawdown > maxDrawdown) maxDrawdown = drawdown;
    });
    
    return maxDrawdown;
  };

  const calculateCurrentStreak = () => {
    let streak = 0;
    const sortedTrades = [...trades].sort((a, b) => new Date(b.date) - new Date(a.date));
    
    for (let trade of sortedTrades) {
      if (trade.pnl > 0) {
        streak++;
      } else {
        break;
      }
    }
    
    return streak;
  };

  const stats = calculateStats();

  const formatValue = (value, type = 'currency') => {
    if (showPrivacy) return '***';
    
    switch (viewMode) {
      case 'percentage':
        return type === 'currency' ? `${(value / 10000 * 100).toFixed(2)}%` : value;
      case 'r-multiple':
        return type === 'currency' ? `${(value / 100).toFixed(2)}R` : value;
      default:
        return type === 'currency' ? `$${value.toFixed(2)}` : value;
    }
  };

  const StatWidget = ({ title, value, icon: Icon, color = 'blue', trend = null }) => (
    <div className="bg-white rounded-lg shadow p-4 hover:shadow-lg transition-shadow">
      <div className="flex items-center justify-between mb-2">
        <span className="text-gray-600 text-sm">{title}</span>
        <Icon className={`w-5 h-5 text-${color}-500`} />
      </div>
      <div className="text-2xl font-bold">{value}</div>
      {trend && (
        <div className={`text-sm mt-1 ${trend > 0 ? 'text-green-500' : 'text-red-500'}`}>
          {trend > 0 ? '↑' : '↓'} {Math.abs(trend)}%
        </div>
      )}
    </div>
  );

  const DashboardView = () => (
    <div className="space-y-6">
      {/* View Selector */}
      <div className="flex justify-between items-center">
        <h2 className="text-2xl font-bold">Dashboard</h2>
        <div className="flex gap-2">
          <button
            onClick={() => setShowPrivacy(!showPrivacy)}
            className="flex items-center gap-2 px-4 py-2 bg-gray-100 rounded-lg hover:bg-gray-200"
          >
            {showPrivacy ? <Eye className="w-4 h-4" /> : <EyeOff className="w-4 h-4" />}
            Privacy
          </button>
          <select
            value={viewMode}
            onChange={(e) => setViewMode(e.target.value)}
            className="px-4 py-2 bg-gray-100 rounded-lg"
          >
            <option value="dollars">Dollars View</option>
            <option value="percentage">Percentage View</option>
            <option value="r-multiple">R-Multiple View</option>
          </select>
        </div>
      </div>

      {/* Upper Section Widgets */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
        <StatWidget
          title="Net P&L"
          value={formatValue(stats.netPnL)}
          icon={DollarSign}
          color={stats.netPnL >= 0 ? 'green' : 'red'}
        />
        <StatWidget
          title="Account Balance"
          value={formatValue(stats.accountBalance)}
          icon={TrendingUp}
          color="blue"
        />
        <StatWidget
          title="Trade Win %"
          value={`${stats.winRate.toFixed(1)}%`}
          icon={Target}
          color="green"
        />
        <StatWidget
          title="Day Win %"
          value={`${stats.dayWinRate.toFixed(1)}%`}
          icon={Calendar}
          color="green"
        />
        <StatWidget
          title="Avg Win/Loss"
          value={`${formatValue(stats.avgWin)} / ${formatValue(stats.avgLoss)}`}
          icon={BarChart3}
          color="blue"
        />
        <StatWidget
          title="Trade Expectancy"
          value={formatValue(stats.expectancy)}
          icon={Activity}
          color={stats.expectancy >= 0 ? 'green' : 'red'}
        />
        <StatWidget
          title="Current Streak"
          value={`${stats.currentStreak} wins`}
          icon={Award}
          color="green"
        />
        <StatWidget
          title="Max Drawdown"
          value={formatValue(stats.maxDrawdown)}
          icon={AlertCircle}
          color="red"
        />
      </div>

      {/* Lower Section - Charts and Calendar */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Daily P&L Chart */}
        <div className="bg-white rounded-lg shadow p-6">
          <h3 className="text-lg font-semibold mb-4">Daily Net P&L</h3>
          <div className="h-64 flex items-end justify-between gap-2">
            {Object.entries(trades.reduce((acc, trade) => {
              const date = trade.date;
              if (!acc[date]) acc[date] = 0;
              acc[date] += trade.pnl - trade.commission;
              return acc;
            }, {})).map(([date, pnl]) => {
              const height = Math.abs(pnl) / 10;
              return (
                <div key={date} className="flex-1 flex flex-col items-center">
                  <div
                    className={`w-full ${pnl >= 0 ? 'bg-green-500' : 'bg-red-500'} rounded-t`}
                    style={{ height: `${height}px`, minHeight: '20px' }}
                  />
                  <span className="text-xs mt-2 rotate-45">{date.slice(5)}</span>
                </div>
              );
            })}
          </div>
        </div>

        {/* Calendar View */}
        <div className="bg-white rounded-lg shadow p-6">
          <h3 className="text-lg font-semibold mb-4">Trading Calendar</h3>
          <div className="grid grid-cols-7 gap-2">
            {['S', 'M', 'T', 'W', 'T', 'F', 'S'].map(day => (
              <div key={day} className="text-center text-sm font-medium text-gray-600">
                {day}
              </div>
            ))}
            {/* Simplified calendar - in real app, would show full month */}
            {Array.from({ length: 31 }, (_, i) => {
              const day = i + 1;
              const dateStr = `2025-01-${day.toString().padStart(2, '0')}`;
              const dayPnL = trades
                .filter(t => t.date === dateStr)
                .reduce((sum, t) => sum + t.pnl - t.commission, 0);
              
              return (
                <div
                  key={i}
                  className={`
                    aspect-square flex items-center justify-center rounded text-sm
                    ${dayPnL > 0 ? 'bg-green-100 text-green-800' : 
                      dayPnL < 0 ? 'bg-red-100 text-red-800' : 
                      'bg-gray-50 text-gray-400'}
                  `}
                >
                  {day}
                </div>
              );
            })}
          </div>
        </div>
      </div>

      {/* Open Positions / Recent Trades */}
      <div className="bg-white rounded-lg shadow p-6">
        <h3 className="text-lg font-semibold mb-4">Recent Trades</h3>
        <div className="overflow-x-auto">
          <table className="w-full">
            <thead>
              <tr className="border-b">
                <th className="text-left py-2">Date</th>
                <th className="text-left py-2">Symbol</th>
                <th className="text-left py-2">Type</th>
                <th className="text-left py-2">Quantity</th>
                <th className="text-left py-2">Entry</th>
                <th className="text-left py-2">Exit</th>
                <th className="text-left py-2">P&L</th>
                <th className="text-left py-2">Hold Time</th>
              </tr>
            </thead>
            <tbody>
              {trades.slice(0, 5).map(trade => (
                <tr key={trade.id} className="border-b hover:bg-gray-50">
                  <td className="py-2">{trade.date}</td>
                  <td className="py-2 font-medium">{trade.symbol}</td>
                  <td className="py-2">
                    <span className={`px-2 py-1 rounded text-xs ${
                      trade.type === 'LONG' ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'
                    }`}>
                      {trade.type}
                    </span>
                  </td>
                  <td className="py-2">{trade.quantity}</td>
                  <td className="py-2">${trade.entryPrice}</td>
                  <td className="py-2">${trade.exitPrice}</td>
                  <td className={`py-2 font-medium ${trade.pnl >= 0 ? 'text-green-600' : 'text-red-600'}`}>
                    {formatValue(trade.pnl)}
                  </td>
                  <td className="py-2 text-gray-600">{trade.holdTime}</td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  );

  const ReportsView = () => (
    <div className="space-y-6">
      <h2 className="text-2xl font-bold">Reports & Statistics</h2>
      
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        {/* Performance Metrics */}
        <div className="bg-white rounded-lg shadow p-6">
          <h3 className="text-lg font-semibold mb-4">Performance Metrics</h3>
          <div className="space-y-3">
            <div className="flex justify-between">
              <span className="text-gray-600">Total P&L</span>
              <span className="font-medium">{formatValue(stats.netPnL)}</span>
            </div>
            <div className="flex justify-between">
              <span className="text-gray-600">Total Trades</span>
              <span className="font-medium">{stats.totalTrades}</span>
            </div>
            <div className="flex justify-between">
              <span className="text-gray-600">Winning Trades</span>
              <span className="font-medium text-green-600">{stats.winningTrades}</span>
            </div>
            <div className="flex justify-between">
              <span className="text-gray-600">Losing Trades</span>
              <span className="font-medium text-red-600">{stats.losingTrades}</span>
            </div>
            <div className="flex justify-between">
              <span className="text-gray-600">Profit Factor</span>
              <span className="font-medium">{stats.profitFactor.toFixed(2)}</span>
            </div>
            <div className="flex justify-between">
              <span className="text-gray-600">Average Win</span>
              <span className="font-medium text-green-600">{formatValue(stats.avgWin)}</span>
            </div>
            <div className="flex justify-between">
              <span className="text-gray-600">Average Loss</span>
              <span className="font-medium text-red-600">{formatValue(stats.avgLoss)}</span>
            </div>
            <div className="flex justify-between">
              <span className="text-gray-600">Expectancy</span>
              <span className="font-medium">{formatValue(stats.expectancy)}</span>
            </div>
          </div>
        </div>

        {/* Risk Metrics */}
        <div className="bg-white rounded-lg shadow p-6">
          <h3 className="text-lg font-semibold mb-4">Risk Metrics</h3>
          <div className="space-y-3">
            <div className="flex justify-between">
              <span className="text-gray-600">Max Drawdown</span>
              <span className="font-medium text-red-600">{formatValue(stats.maxDrawdown)}</span>
            </div>
            <div className="flex justify-between">
              <span className="text-gray-600">Win Rate</span>
              <span className="font-medium">{stats.winRate.toFixed(1)}%</span>
            </div>
            <div className="flex justify-between">
              <span className="text-gray-600">Day Win Rate</span>
              <span className="font-medium">{stats.dayWinRate.toFixed(1)}%</span>
            </div>
            <div className="flex justify-between">
              <span className="text-gray-600">Current Win Streak</span>
              <span className="font-medium text-green-600">{stats.currentStreak}</span>
            </div>
            <div className="flex justify-between">
              <span className="text-gray-600">Risk/Reward Ratio</span>
              <span className="font-medium">{Math.abs(stats.avgWin / stats.avgLoss).toFixed(2)}</span>
            </div>
          </div>
        </div>
      </div>

      {/* Detailed Statistics */}
      <div className="bg-white rounded-lg shadow p-6">
        <h3 className="text-lg font-semibold mb-4">Detailed Statistics</h3>
        <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
          <div>
            <p className="text-gray-600 text-sm">Largest Profit</p>
            <p className="font-medium text-green-600">
              {formatValue(Math.max(...trades.map(t => t.pnl)))}
            </p>
          </div>
          <div>
            <p className="text-gray-600 text-sm">Largest Loss</p>
            <p className="font-medium text-red-600">
              {formatValue(Math.min(...trades.map(t => t.pnl)))}
            </p>
          </div>
          <div>
            <p className="text-gray-600 text-sm">Total Commission</p>
            <p className="font-medium">
              {formatValue(trades.reduce((sum, t) => sum + t.commission, 0))}
            </p>
          </div>
          <div>
            <p className="text-gray-600 text-sm">Avg Hold Time</p>
            <p className="font-medium">2h 45m</p>
          </div>
        </div>
      </div>
    </div>
  );

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <header className="bg-white shadow">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center py-4">
            <div className="flex items-center space-x-4">
              <h1 className="text-2xl font-bold text-gray-900">TradingJournal</h1>
              <nav className="flex space-x-4">
                <button
                  onClick={() => setActiveTab('dashboard')}
                  className={`px-3 py-2 rounded-md text-sm font-medium ${
                    activeTab === 'dashboard' 
                      ? 'bg-gray-900 text-white' 
                      : 'text-gray-700 hover:bg-gray-100'
                  }`}
                >
                  Dashboard
                </button>
                <button
                  onClick={() => setActiveTab('reports')}
                  className={`px-3 py-2 rounded-md text-sm font-medium ${
                    activeTab === 'reports' 
                      ? 'bg-gray-900 text-white' 
                      : 'text-gray-700 hover:bg-gray-100'
                  }`}
                >
                  Reports
                </button>
              </nav>
            </div>
            <div className="flex items-center space-x-4">
              <button className="flex items-center gap-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700">
                <Plus className="w-4 h-4" />
                Import Trades
              </button>
              <button className="p-2 rounded-lg hover:bg-gray-100">
                <Settings className="w-5 h-5" />
              </button>
            </div>
          </div>
        </div>
      </header>

      {/* Main Content */}
      <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {activeTab === 'dashboard' ? <DashboardView /> : <ReportsView />}
      </main>
    </div>
  );
};

export default TradingJournal;
